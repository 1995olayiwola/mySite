{"version":3,"sources":["Projects/Project005/Bank2.jsx","App3.jsx","store/reducer.jsx","transaction.jsx"],"names":["Bank2","className","type","onChange","e","setState","number","target","value","onClick","amount","props","deposit","parseInt","state","React","Component","connect","balance","transactionHistory","dispatch","App3","this","map","log","transactionType","newBalance","date","withdraw","initialState","reducer","action","newState","Date","toLocaleString","concat","index2","store","createStore"],"mappings":"sNAGMA,E,uKAKM,IAAD,OACT,OAEE,sBAAKC,UAAU,OAAf,UACI,sCAGF,oDAEE,uBACA,uBACCC,KAAK,SACLD,UAAU,YACVE,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,cAGrD,wBACIP,UAAU,UACVQ,QAAS,SAACC,GAAD,OAAY,EAAKC,MAAMC,QAAQC,SAAS,EAAKC,MAAMR,OAAQ,MAFxE,4B,GArBgBS,IAAMC,WA2CXC,eAbS,SAAAH,GACtB,MAAO,CACLI,QAASJ,EAAMI,QACfC,mBAAoBL,EAAMK,uBAIH,SAAAC,GACzB,MAAO,CACLR,QAAS,SAACF,GAAD,OAAYU,EAAS,CAAClB,KAAK,UAAWM,MAAOE,QAI3CO,CAGXjB,GC3CEqB,E,uKAEI,IAAD,OAEHF,EACH,8BACEG,KAAKX,MAAMQ,mBAAmBI,KAAI,SAACC,GAAU,OAAO,+BAAKA,EAAIC,gBAAT,KAA4BD,EAAId,OAAhC,wBAA6Dc,EAAIE,WAAjE,MAAgFF,EAAIG,KAApF,YAIrD,OACE,sBAAK1B,UAAU,MAAf,UAEA,wBAAQA,UAAU,aAAlB,SAEI,wDAIJ,2CAAcqB,KAAKX,MAAMO,WAEzB,sBAAKjB,UAAU,MAAf,UACE,6CACA,qDAEA,uBACA,uBACCC,KAAK,SACLD,UAAU,YACVE,SAAU,SAAAC,GAAC,OAAI,EAAKC,SAAS,CAAEC,OAAQF,EAAEG,OAAOC,cAGrD,wBACIP,UAAU,UACVQ,QAAS,SAACC,GAAD,OAAY,EAAKC,MAAMiB,SAASf,SAAS,EAAKC,MAAMR,OAAQ,MAFzE,wBAOE,cAAC,EAAD,IAEA,gCACE,qDACCa,Y,GA3CUH,aAiEJC,eAdS,SAAAH,GACtB,MAAO,CACLI,QAASJ,EAAMI,QACfC,mBAAoBL,EAAMK,uBAIH,SAAAC,GACzB,MAAO,CAELQ,SAAU,SAAClB,GAAD,OAAYU,EAAS,CAAClB,KAAK,WAAYM,MAAOE,QAI7CO,CAGXI,G,QCxEEQ,EAAe,CACpBX,QAAS,EACTC,mBAAoB,IA+BNW,EA5BC,WAAmC,IAAlChB,EAAiC,uDAAzBe,EAAcE,EAAW,uCAC1CC,EAAQ,eAAOlB,GAEjBa,GAAO,IAAIM,MAAOC,iBAItB,OAAQH,EAAO7B,MAEd,IAAK,WACP,OAAO,2BACFY,GADL,IAEEI,QAASJ,EAAMI,QAAUa,EAAOvB,MAChCW,mBAAoBL,EAAMK,mBAAmBgB,OAAO,CAAER,KAAMA,EAAMF,gBAAiB,YAAaf,OAAQqB,EAAOvB,MAAOkB,WAAYZ,EAAMI,QAAUa,EAAOvB,UAI3J,IAAK,UACL,OAAO,2BACFM,GADL,IAEEI,QAASJ,EAAMI,QAAUa,EAAOvB,MAChCW,mBAAoBL,EAAMK,mBAAmBgB,OAAO,CAAER,KAAMA,EAAMF,gBAAiB,UAAWf,OAAQqB,EAAOvB,MAAOkB,WAAYZ,EAAMI,QAAUa,EAAOvB,UAIzJ,OAAOwB,G,SChBOI,UAVA,WACX,IAAMC,EAAQC,YAAYR,GAC1B,OACI,gCACI,cAAC,IAAD,CAAUO,MAAOA,EAAjB,SAAwB,cAAC,EAAD,MAD5B","file":"static/js/12.b7af3b4c.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Bank2 extends React.Component {\r\n\r\n//we are using state in his component hold the input deposit amount until the user\r\n//clicks confrm.\r\n\r\n  render() {\r\n  return (\r\n\r\n    <div className=\"bank\">    \r\n        <h2>Bank</h2>\r\n\r\n  {/* Deposit Input */}\r\n      <label>\r\n      Make a deposit:\r\n        <br />\r\n        <input\r\n         type=\"number\"\r\n         className=\"textfield\"\r\n         onChange={e => this.setState({ number: e.target.value })}/>\r\n      </label>\r\n    \r\n    <button \r\n        className=\"mainbtn\"\r\n        onClick={(amount) => this.props.deposit(parseInt(this.state.number, 10))}>Confirm\r\n      </button>\r\n    </div>\r\n    );\r\n   }\r\n  }\r\n\r\nconst mapStateToProps = state => {\r\n  return { \r\n    balance: state.balance,\r\n    transactionHistory: state.transactionHistory\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    deposit: (amount) => dispatch({type:'deposit', value: amount}),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n  )(Bank2);\r\n\r\n","import React, { Component } from 'react';\r\n//import logo from './friedhead.svg';\r\nimport './App3.css';\r\nimport Bank2 from './Projects/Project005/Bank2'\r\nimport { connect } from 'react-redux';\r\n\r\nclass App3 extends Component {\r\n\r\nrender() { \r\n\r\n  let transactionHistory = (\r\n   <div>\r\n    {this.props.transactionHistory.map((log) => { return <li>{log.transactionType} #{log.amount} | closing balance: #{log.newBalance} | {log.date} </li> })} \r\n   </div>\r\n  )\r\n\r\n    return (\r\n      <div className=\"App\">\r\n\r\n      <header className=\"App-header\">\r\n          {/*<img src={logo} className=\"App-logo\" alt=\"logo\" />*/}\r\n          <h1>Today's transactions</h1>\r\n\r\n      </header>\r\n\r\n      <h1>Balance: {this.props.balance}</h1>\r\n\r\n      <div className=\"atm\">    \r\n        <h2>ATM Machine</h2>\r\n        <label>\r\n      Make a withdraw:\r\n        <br />\r\n        <input\r\n         type=\"number\"\r\n         className=\"textfield\"\r\n         onChange={e => this.setState({ number: e.target.value })}/>\r\n      </label>\r\n    \r\n    <button \r\n        className=\"mainbtn\"\r\n        onClick={(amount) => this.props.withdraw(parseInt(this.state.number, 10))}>Confirm\r\n      </button>\r\n        \r\n      </div>\r\n\r\n      <Bank2 />\r\n\r\n      <div>\r\n        <h2>Transaction History</h2>\r\n        {transactionHistory}\r\n      </div>\r\n \r\n    </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return { \r\n    balance: state.balance,\r\n    transactionHistory: state.transactionHistory\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    //in last app values were hard coded, now we pass a payload depending on which button is clicked\r\n    withdraw: (amount) => dispatch({type:'withdraw', value: amount}),\r\n  }\r\n}\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n  )(App3);\r\n\r\n","//Reducer! We apply a method based on the action that has been dispatched.\r\n\r\nconst initialState = {\r\n\tbalance: 0,\r\n\ttransactionHistory: []\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const newState = {...state};\r\n\r\n  let date = new Date().toLocaleString()\r\n\r\n//using a switch statement instead of if/else  \r\n//receiving and using a payload\r\n  switch (action.type) {\r\n  \t\r\n  \tcase \"withdraw\":\r\n\treturn { \r\n\t  ...state,\r\n\t  balance: state.balance - action.value,\r\n\t  transactionHistory: state.transactionHistory.concat({ date: date, transactionType: 'withdrawl', amount: action.value, newBalance: state.balance - action.value })\r\n\t};\r\n\tbreak;\r\n\r\n\tcase \"deposit\":\r\n\treturn { \r\n\t  ...state,\r\n\t  balance: state.balance + action.value,\r\n\t  transactionHistory: state.transactionHistory.concat({ date: date, transactionType: 'deposit', amount: action.value, newBalance: state.balance + action.value })\r\n\t};\r\n\tbreak;\r\n }\r\n return newState\r\n}\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport App3 from './App3'\r\nimport reducer from './store/reducer';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore } from 'redux';\r\n\r\nconst index2 = () => {\r\n    const store = createStore(reducer);\r\n    return (\r\n        <div>\r\n            <Provider store={store}><App3 />\r\n</Provider>,\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default index2\r\n"],"sourceRoot":""}