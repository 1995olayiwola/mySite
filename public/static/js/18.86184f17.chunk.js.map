{"version":3,"sources":["Widgets/DateTime.jsx","Projects/Project005/Register.jsx"],"names":["DateTime","Props","Form","Group","controlId","name","title","Label","style","fontWeight","marginTop","onChange","handleChange","value","Add","React","useState","number","setNumber","initialData","startDate","Date","endDate","location","content","categories","username","email","formValues","setFormValues","error","setError","loading","setLoading","handleChangeWithName2","e","target","val","fav","handleSubmit","a","preventDefault","user","Parse","User","current","Post","Object","extend","post","acl","ACL","setWriteAccess","setReadAccess","setACL","set","console","log","save","history","push","message","onSubmit","Control","type","placeholder","bind","this","SingleSelect","options","label","RichTextArea","handleDescription","Location","formatted_address","onHandleSelect","input","fV","dob","activity1","MyAlert","Loading","Button"],"mappings":"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","file":"static/js/18.86184f17.chunk.js","sourcesContent":["import React from 'react';\r\nimport{Form}  from 'react-bootstrap';\r\nimport DateTimePicker from 'react-datetime-picker'\r\n\r\nconst DateTime = (Props) => {\r\n    return (\r\n        <Form.Group controlId={Props.name} >\r\n             {Props.title && <Form.Label style={{fontWeight:'bold',marginTop:'10px'}}>{Props.title}</Form.Label>}\r\n    \r\n    <div>\r\n        <DateTimePicker onChange={Props.handleChange} value={Props.value} name={Props.name} />\r\n    </div>\r\n    \r\n  </Form.Group>\r\n  \r\n    )\r\n}\r\n\r\nexport default DateTime;\r\n","import React from 'react';\r\nimport MyAlert from '../../Utils/MyAlert';\r\nimport Parse from 'parse';\r\nimport Loading from '../../Utils/Loading';\r\nimport {Form,Button} from 'react-bootstrap';\r\nimport Location from '../../Widgets/LocationBox/Location';\r\n//import {Select} from 'react-select';\r\nimport RichTextArea from '../../Widgets/RichTextArea'\r\nimport SingleSelect from '../../Widgets/ReactSelect/SingleSelect';\r\n\r\n\r\nimport DateTime from '../../Widgets/DateTime';\r\n\r\n\r\nfunction Add(Props) {\r\nconst[number,setNumber]= React.useState(null);\r\n\r\n    const tableName = \"TestingCheckbox\";\r\n    const initialData = {\r\n        startDate:new Date(),\r\n        endDate:new Date(),\r\n        location: {},\r\n      content: '',\r\n      categories: null,\r\n      number:number,\r\n      username:\"\",\r\n      email:\"\"\r\n        \r\n    };\r\n    const[formValues,setFormValues]=React.useState(initialData);\r\n    const[error,setError]=React.useState(null);\r\n    const[loading,setLoading]=React.useState(false);\r\nconst handleChangeWithName =(e)=> {\r\n    console.log('onChange fired with value:', +e.target.value);\r\n    setNumber(()=>{\r\n       return (+e.target.value)\r\n    })\r\n  \r\n  }\r\n    \r\n    const handleChangeWithName2 =(name,e)=> {\r\n    \r\n    setFormValues(()=>{\r\n       return {\r\n           ...formValues,\r\n           [e.target.name]:e.target.value\r\n       }\r\n    })\r\n  \r\n  }\r\n   \r\n\r\n   const handleLocationSelect = (name, input) => {\r\n      setFormValues((fV) => {\r\n         return {\r\n            ...fV,\r\n            [name]: input\r\n         }\r\n      })\r\n   }\r\n\r\n   \r\n    \r\n\r\n  \r\n \r\n\r\n\r\n   const handleChange=(name,val) =>{\r\n        \r\n       //e.persist();\r\n       setFormValues((fav)=>{\r\n        return {...fav,[name]:val};\r\n       });\r\n   }\r\n    \r\n    const handleSubmit = async(e)=>{\r\n        try{\r\ne.preventDefault();\r\nawait setLoading(true);\r\n await setError(null);\r\nconst user = Parse.User.current();\r\nconst Post = Parse.Object.extend(tableName);\r\nconst post = new Post();\r\n// write ACL code here\r\nconst acl= new Parse.ACL();\r\nacl.setWriteAccess(user,true);\r\n//private user read access\r\nacl.setReadAccess(user,true);\r\n//acl.setPublicReadAccess(true);\r\npost.setACL(acl);\r\n//post users\r\npost.set('startDate',formValues.startDate);\r\npost.set('endDate',formValues.endDate);\r\n\r\npost.set('user',user);\r\nconsole.log('post is',post);\r\nawait post.save();\r\nawait setLoading(false);\r\nProps.history.push('/');\r\n        }catch(eror){\r\nconsole.log('eror is :' ,eror);\r\n\r\n await setLoading(false);\r\n await setError(error.message);\r\n        }\r\n    };\r\n    return (\r\n        <div>\r\n  \r\n\r\n           <Form onSubmit={handleSubmit}>\r\n   <Form.Group controlId=\"formBasicName\">\r\n   <Form.Label>Name</Form.Label>\r\n    <Form.Control type=\"text\" placeholder=\"Enter your name\" onChange= {handleChangeWithName2.bind(this,'username')} value={formValues.value} name=\"username\"/>\r\n </Form.Group>  \r\n<Form.Group controlId=\"formBasicNumber\">\r\n    <Form.Label>Enter Phone number</Form.Label>\r\n    <Form.Control type=\"number\" placeholder=\"Enter your phone number\" onChange= {handleChangeWithName} value={number} />\r\n </Form.Group>\r\n  \r\n <Form.Group controlId=\"formBasicAddress\">\r\n <Form.Label>Enter Email</Form.Label>\r\n    <Form.Control type=\"email\" placeholder=\"Enter Pos brand\" onChange= {handleChangeWithName2.bind(this,'email')} value={formValues.value} name=\"brand\"/>\r\n </Form.Group>\r\n \r\n \r\n  \r\n\r\n  <SingleSelect title=\"Gender\"  handleChange={handleChange.bind(this,'categories')} options = {[\r\n    { value: 'Male', label: 'Male' },\r\n                    { value: 'Female ', label: 'Female' },\r\n                                                                                      \r\n  ]}\r\n  />\r\n  <RichTextArea \r\n  handleDescription={handleChange.bind(this,'content')}\r\n   value={formValues.content}\r\n   placeholder=\"Enter your message\"\r\n   title=\"Message\"\r\n   \r\n   />\r\n    \r\n <Location \r\n              title=\"Enter your current address\"\r\n              value={(formValues.location && formValues.location.formatted_address)||''}\r\n              onHandleSelect={handleLocationSelect.bind(this,'location')}\r\n              options=\"\"\r\n              />\r\n               \r\n               <DateTime name=\"start date\" value={formValues.dob} \r\n                title=\"Start Date\" handleChange={handleChange.bind(this,'dob')}/>\r\n               \r\n               <DateTime name=\"expire date\" value={formValues.activity1} \r\n                title=\"End Date\" handleChange={handleChange.bind(this,'activity1')}/>\r\n               \r\n               \r\n               {error && <MyAlert   message={error}/>}\r\n               {loading && <Loading />}\r\n               <Button type=\"submit\">Submit</Button>\r\n           </Form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Add;\r\n"],"sourceRoot":""}