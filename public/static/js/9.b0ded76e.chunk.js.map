{"version":3,"sources":["Projects/Project005/Add.jsx"],"names":["Pagination","page_rw","startRow_rw","SetPage_rw","SetStartRow_rw","max","Total_row","Total_pages","url","history","Math","min","border","align","width","cellPadding","style","cursor","onClick","push","prevPage","prevStart","nextPage","nextStart","Add","props","console","log","React","useState","results","count","data","setData","location","setLocation","keyword","formValues","setFormValues","page","match","params","pageId","start","ceil","lat","lng","loc","Parse","GeoPoint","latitude","longitude","useEffect","a","userLocation","query","Query","withinMiles","descending","skip","limit","withCount","find","records","process","className","marginTop","marginLeft","marginRight","justifyContent","flexWrap","title","value","formatted_address","onHandleSelect","name","input","fV","bind","options","placeholder","handleChange","e","persist","fv","target","type","variant","length","striped","bordered","hover","map","item","category","get","categoryLabel","label","distance","milesTo","toFixed","id","renderHTML","fontWeight","moment","fromNow"],"mappings":"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","file":"static/js/9.b0ded76e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Parse from 'parse';\r\n\r\n//import {Link} from 'react-router-dom';\r\n//import Add from './Add';\r\nimport moment from 'moment';\r\nimport Location from '../../Widgets/LocationBox/Location';\r\nimport Input from '../../Widgets/Input'\r\nimport renderHTML from 'react-render-html';\r\nimport {\r\n    Button,\r\n    Table\r\n} from 'react-bootstrap'\r\n//import Header from './Header';\r\n//import Footer from './Footer';\r\n\r\nfunction Pagination({\r\n    page_rw,\r\n    startRow_rw,\r\n    SetPage_rw,\r\n    SetStartRow_rw,\r\n    max,\r\n    Total_row,\r\n    Total_pages,\r\n    url,\r\n    history\r\n}) {\r\n    return <div >\r\n        <\r\n        div > Records {\r\n            startRow_rw + 1\r\n        }\r\n    to {\r\n        Math.min(startRow_rw + max, Total_row)\r\n    } of {\r\n        Total_row\r\n    } < /div>\r\n\r\n    <\r\n    table border = \"0\"\r\n    align = \"center\"\r\n    width = \"50%\"\r\n    cellPadding = \"5\" >\r\n        <\r\n        tbody >\r\n        <\r\n        tr >\r\n        <\r\n        td > < span style = {\r\n            {\r\n                cursor: 'pointer'\r\n            }\r\n        }\r\n    onClick = {\r\n            () => {\r\n                SetPage_rw(0);\r\n                SetStartRow_rw(0);\r\n                history.push(`${url}/0`)\r\n            }\r\n        } > First < /span></td >\r\n        <\r\n        td > < span style = {\r\n            {\r\n                cursor: 'pointer'\r\n            }\r\n        }\r\n    onClick = {\r\n            () => {\r\n                const prevPage = Math.max(0, page_rw - 1);\r\n                const prevStart = prevPage * max;\r\n                SetPage_rw(prevPage);\r\n                SetStartRow_rw(prevStart);\r\n                history.push(`${url}/${prevPage}`)\r\n            }\r\n        } > Previous < /span></td >\r\n        <\r\n        td > < span onClick = {\r\n            () => {\r\n                const nextPage = Math.min(page_rw + 1, Total_pages);\r\n                const nextStart = nextPage * max;\r\n                SetPage_rw(nextPage);\r\n                SetStartRow_rw(nextStart);\r\n                history.push(`${url}/${nextPage}`)\r\n            }\r\n        }\r\n    style = {\r\n            {\r\n                cursor: 'pointer'\r\n            }\r\n        } > Next < /span></td >\r\n        <\r\n        td > < span onClick = {\r\n            () => {\r\n\r\n                const nextStart = Total_pages * max;\r\n                SetPage_rw(Total_pages);\r\n                SetStartRow_rw(nextStart);\r\n                history.push(`${url}/${Total_pages}`)\r\n            }\r\n        }\r\n    style = {\r\n            {\r\n                cursor: 'pointer'\r\n            }\r\n        } > Last < /span></td >\r\n\r\n        <\r\n        /tr> <\r\n        /tbody> <\r\n        /table> <\r\n        /div>\r\n}\r\n\r\nconst Add = (props) => {\r\n        const handleChange = (e) => {\r\n            e.persist();\r\n            setFormValues((fv) => {\r\n                return {\r\n                    ...fv,\r\n                    [e.target.name]: e.target.value\r\n                }\r\n            })\r\n        };\r\n        console.log('props is', props)\r\n        const [data, setData] = React.useState({\r\n            results: [],\r\n            count: 0\r\n        });\r\n        const initialData = {\r\n            location: null,\r\n            keyword: ''\r\n\r\n\r\n        };\r\n        const history = props.history;\r\n        const [location, setLocation] = React.useState(null);\r\n        const [keyword, setKeyword] = React.useState(null);\r\n        const [formValues, setFormValues] = React.useState(initialData);\r\n        const max = 5;\r\n        const page = props.match.params.pageId || 0;\r\n        const start = page * max;\r\n        const [page_rw, SetPage_rw] = React.useState(page);\r\n        const [startRow_rw, SetStartRow_rw] = React.useState(start);\r\n        const url = '/page';\r\n        const Total_row = (data && data.count) || 0;\r\n        const Total_pages = Math.ceil(Total_row / max) - 1;\r\n        const handleLocationSelect = (name, input) => {\r\n            setFormValues((fV) => {\r\n                return {\r\n                    ...fV,\r\n                    [name]: input\r\n                }\r\n            })\r\n        }\r\n\r\n        const lat = location && location.lat;\r\n        const lng = location && location.lng;\r\n        let loc = null;\r\n        if (lat && lng) {\r\n            loc = new Parse.GeoPoint({\r\n                latitude: lat,\r\n                longitude: lng\r\n            })\r\n        }\r\n        React.useEffect(() => {\r\n\r\n            const process = async () => {\r\n                const lat = null;\r\n                const lng = null;\r\n                let userLocation = null;\r\n                if (lat && lng) {\r\n                    userLocation = new Parse.GeoPoint({\r\n                        latitude: lat,\r\n                        longitude: lng,\r\n                    })\r\n                }\r\n                const query = new Parse.Query('TotalInfo');\r\n                if (userLocation) {\r\n                    query.withinMiles('location_geo', userLocation, 10000, true)\r\n                } else {\r\n                    query.descending('createdAt');\r\n\r\n                }\r\n                query.skip(startRow_rw);\r\n                query.limit(max);\r\n\r\n                query.withCount();\r\n                const records = await query.find();\r\n                await setData(records);\r\n            }\r\n            process();\r\n        }, [startRow_rw, lat, lng])\r\n        console.log('data is:', data)\r\n        return ( <\r\n            div >\r\n\r\n            <\r\n            div className = \"row\"\r\n            style = {\r\n                {\r\n                    marginTop: '10px',\r\n                    marginLeft: '10px',\r\n                    marginRight: '10px',\r\n                    justifyContent: 'center',\r\n                    flexWrap: 'wrap'\r\n                }\r\n            } >\r\n            <\r\n            div className = \"col-12\" > < h3 > Search Records < /h3> <\r\n            Location title = \"Enter the  address\"\r\n            value = {\r\n                (formValues.location && formValues.location.formatted_address) || ''\r\n            }\r\n            onHandleSelect = {\r\n                handleLocationSelect.bind(this, 'location')\r\n            }\r\n            options = \"\" /\r\n            >\r\n            <\r\n            Input name = \"keyword\"\r\n            title = \"Keyword\"\r\n            placeholder = \" Search for keywords\"\r\n            value = {\r\n                formValues.keyword\r\n            }\r\n            handleChange = {\r\n                handleChange.bind('', )\r\n            }\r\n            /> <\r\n            Button type = \"button\"\r\n            variant = \"primary\"\r\n            onClick = {\r\n                () => {\r\n                    setLocation(formValues.location);\r\n                }\r\n            } >\r\n            Search < /Button> <\r\n            /div> <\r\n            div className = \"col-12\" > {\r\n                data.results.length > 0 && ( <\r\n                    >\r\n                    <\r\n                    Table striped bordered hover >\r\n                    <\r\n                    thead >\r\n                    <\r\n                    tr >\r\n                    <\r\n                    th > id < /th> <\r\n                    th > Message < /th> <\r\n                    th > Location < /th> <\r\n                    th > Bank categories < /th> <\r\n                    th > Amount transfer < /th> <\r\n                    th > Charges < /th>\r\n\r\n                    <\r\n                    /tr> <\r\n                    /thead> <\r\n                    tbody > {\r\n                        data.results.map((item) => {\r\n                                const category = item.get('categories');\r\n                                const categoryLabel = category && category.label;\r\n                                let distance = null;\r\n                                if (loc) {\r\n                                    distance = item.get('location_geo').milesTo(loc).toFixed(2);\r\n                                }\r\n                                return ( <\r\n                                    tr key = {\r\n                                        item.id\r\n                                    } >\r\n                                    <\r\n                                    td > {\r\n                                        item.id\r\n                                    } < /td> <\r\n                                    td > {\r\n                                        renderHTML(item.get('content'))\r\n                                    } < /td> <\r\n                                    td >\r\n                                    <\r\n                                    div > {\r\n                                        item.get('location').formatted_address\r\n                                    } < /div> <\r\n                                    div style = {\r\n                                        {\r\n                                            fontWeight: 'bold'\r\n                                        }\r\n                                    } > {\r\n                                        moment(item.get('createdAt')).fromNow()\r\n                                    } < /div> {\r\n                                        distance && < div style = {\r\n                                            {\r\n                                                fontWeight: 'bold'\r\n                                            }\r\n                                        } > {\r\n                                            distance\r\n                                        }\r\n                                        miles < /div>}  \r\n\r\n                                            <\r\n                                            /td> <\r\n                                            td > {\r\n                                                categoryLabel\r\n                                            } < /td> <\r\n                                            td > {\r\n                                                item.get('number')\r\n                                            } < /td> <\r\n                                            td > {\r\n                                                item.get('number2')\r\n                                            } < /td>\r\n\r\n                                            <\r\n                                            /tr>\r\n                                    );\r\n                                })\r\n                        }\r\n\r\n\r\n\r\n                        <\r\n                        /tbody> <\r\n                        /Table> <\r\n                        Pagination page_rw = {\r\n                            page_rw\r\n                        }\r\n                        startRow_rw = {\r\n                            startRow_rw\r\n                        }\r\n                        SetPage_rw = {\r\n                            SetPage_rw\r\n                        }\r\n                        SetStartRow_rw = {\r\n                            SetStartRow_rw\r\n                        }\r\n                        max = {\r\n                            max\r\n                        }\r\n                        Total_row = {\r\n                            Total_row\r\n                        }\r\n                        Total_pages = {\r\n                            Total_pages\r\n                        }\r\n                        url = {\r\n                            url\r\n                        }\r\n                        history = {\r\n                            history\r\n                        }\r\n                        /> <\r\n                        />\r\n                    )\r\n                }\r\n\r\n\r\n                <\r\n                /div>\r\n\r\n                <\r\n                /div>\r\n\r\n\r\n                <\r\n                /div>\r\n\r\n            )\r\n        }\r\n        export default Add;"],"sourceRoot":""}